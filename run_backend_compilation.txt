!tuple = tuple<tensor<f32>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096xf32>, tensor<4096x11008xf32>, tensor<4096xf32>, tensor<32000x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096xf32>, tensor<4096x11008xf32>, tensor<4096xf32>, tensor<32000x4096xf32>, tensor<i32>, tensor<4096x4096xf16>, tensor<4096x4096xf16>, tensor<4096x4096xf16>, tensor<4096x4096xf16>, tensor<4096xf16>, tensor<4096x11008xf16>, tensor<4096xf16>, tensor<32000x4096xf16>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096x4096xf32>, tensor<4096xf32>, tensor<4096x11008xf32>, tensor<4096xf32>, tensor<32000x4096xf32>>
#loc = loc(unknown)
#loc1 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/reduce_sum[axes=(0, 1)]")
#loc2 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/linear_algebra.py":30:0)
#loc3 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/reduce_sum[axes=(0,)]")
#loc4 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/reduce_and[axes=(0, 1)]")
#loc5 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":493:0)
#loc6 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/reduce_and[axes=(0,)]")
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc2])
#loc122 = loc(fused[#loc4, #loc5])
#loc123 = loc(fused[#loc6, #loc5])
module @"train_step_pipeshard_parallel_mesh_0-0_apply_grad" attributes {mhlo.cross_program_prefetches = [], mhlo.is_dynamic = false, mhlo.use_auto_spmd_partitioning = false} {
  func.func private @region_40.1301.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc120)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_39.1295.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc121)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_38.1289.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc120)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_37.1283.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc121)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_36.1277.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc120)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_35.1271.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc120)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_34.1265.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc120)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_33.1259.0_apply_grad(%arg0: tensor<f32> loc(unknown), %arg1: tensor<f32> loc(unknown)) -> tensor<f32> {
    %0 = stablehlo.add %arg0, %arg1 : tensor<f32> loc(#loc120)
    return %0 : tensor<f32> loc(#loc)
  } loc(#loc)
  func.func private @region_32.1232.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc122)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_31.1226.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc123)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_30.1220.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc122)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_29.1214.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc123)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_28.1208.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc122)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_27.1202.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc122)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_26.1196.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc122)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func private @region_25.1190.0_apply_grad(%arg0: tensor<i1> loc(unknown), %arg1: tensor<i1> loc(unknown)) -> tensor<i1> {
    %0 = stablehlo.and %arg0, %arg1 : tensor<i1> loc(#loc122)
    return %0 : tensor<i1> loc(#loc)
  } loc(#loc)
  func.func @main(%arg0: tensor<f32> loc(unknown), %arg1: tensor<i32> loc(unknown), %arg2: tensor<i32> loc(unknown), %arg3: tensor<i32> loc(unknown), %arg4: tensor<4096x4096xf32> loc(unknown), %arg5: tensor<4096x4096xf32> loc(unknown), %arg6: tensor<4096x4096xf32> loc(unknown), %arg7: tensor<4096x4096xf32> loc(unknown), %arg8: tensor<4096xf32> loc(unknown), %arg9: tensor<4096x11008xf32> loc(unknown), %arg10: tensor<4096xf32> loc(unknown), %arg11: tensor<32000x4096xf32> loc(unknown), %arg12: tensor<4096x4096xf32> loc(unknown), %arg13: tensor<4096x4096xf32> loc(unknown), %arg14: tensor<4096x4096xf32> loc(unknown), %arg15: tensor<4096x4096xf32> loc(unknown), %arg16: tensor<4096xf32> loc(unknown), %arg17: tensor<4096x11008xf32> loc(unknown), %arg18: tensor<4096xf32> loc(unknown), %arg19: tensor<32000x4096xf32> loc(unknown), %arg20: tensor<i32> loc(unknown), %arg21: tensor<4096x4096xf16> loc(unknown), %arg22: tensor<4096x4096xf16> loc(unknown), %arg23: tensor<4096x4096xf16> loc(unknown), %arg24: tensor<4096x4096xf16> loc(unknown), %arg25: tensor<4096xf16> loc(unknown), %arg26: tensor<4096x11008xf16> loc(unknown), %arg27: tensor<4096xf16> loc(unknown), %arg28: tensor<32000x4096xf16> loc(unknown), %arg29: tensor<4096x4096xf32> loc(unknown), %arg30: tensor<4096x4096xf32> loc(unknown), %arg31: tensor<4096x4096xf32> loc(unknown), %arg32: tensor<4096x4096xf32> loc(unknown), %arg33: tensor<4096xf32> loc(unknown), %arg34: tensor<4096x11008xf32> loc(unknown), %arg35: tensor<4096xf32> loc(unknown), %arg36: tensor<32000x4096xf32> loc(unknown), %arg37: tensor<4096x4096xf16> loc(unknown), %arg38: tensor<4096x4096xf16> loc(unknown), %arg39: tensor<4096x4096xf16> loc(unknown), %arg40: tensor<4096x4096xf16> loc(unknown), %arg41: tensor<4096xf16> loc(unknown), %arg42: tensor<4096x11008xf16> loc(unknown), %arg43: tensor<4096xf16> loc(unknown), %arg44: tensor<32000x4096xf16> loc(unknown)) -> !tuple {
    %0 = stablehlo.constant dense<1.000000e+00> : tensor<f16> loc(#loc7)
    %1 = stablehlo.constant dense<1.000000e+00> : tensor<4096x4096xf16> loc(#loc8)
    %2 = stablehlo.divide %arg37, %1 : tensor<4096x4096xf16> loc(#loc8)
    %3 = stablehlo.convert %2 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32> loc(#loc124)
    %4 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc125)
    %5 = stablehlo.divide %3, %4 : tensor<4096x4096xf32> loc(#loc125)
    %6 = stablehlo.is_finite %5 : (tensor<4096x4096xf32>) -> tensor<4096x4096xi1> loc(#loc126)
    %7 = stablehlo.constant dense<true> : tensor<i1> loc(#loc12)
    %8 = stablehlo.reduce(%6 init: %7) across dimensions = [0, 1] : (tensor<4096x4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc4, #loc5]), %arg46: tensor<i1> loc(fused[#loc4, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc122)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc122)
    %9 = stablehlo.divide %arg38, %1 : tensor<4096x4096xf16> loc(#loc8)
    %10 = stablehlo.convert %9 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32> loc(#loc124)
    %11 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc125)
    %12 = stablehlo.divide %10, %11 : tensor<4096x4096xf32> loc(#loc125)
    %13 = stablehlo.is_finite %12 : (tensor<4096x4096xf32>) -> tensor<4096x4096xi1> loc(#loc126)
    %14 = stablehlo.reduce(%13 init: %7) across dimensions = [0, 1] : (tensor<4096x4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc4, #loc5]), %arg46: tensor<i1> loc(fused[#loc4, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc122)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc122)
    %15 = stablehlo.and %8, %14 : tensor<i1> loc(#loc13)
    %16 = stablehlo.divide %arg39, %1 : tensor<4096x4096xf16> loc(#loc8)
    %17 = stablehlo.convert %16 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32> loc(#loc124)
    %18 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc125)
    %19 = stablehlo.divide %17, %18 : tensor<4096x4096xf32> loc(#loc125)
    %20 = stablehlo.is_finite %19 : (tensor<4096x4096xf32>) -> tensor<4096x4096xi1> loc(#loc126)
    %21 = stablehlo.reduce(%20 init: %7) across dimensions = [0, 1] : (tensor<4096x4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc4, #loc5]), %arg46: tensor<i1> loc(fused[#loc4, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc122)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc122)
    %22 = stablehlo.and %15, %21 : tensor<i1> loc(#loc13)
    %23 = stablehlo.divide %arg40, %1 : tensor<4096x4096xf16> loc(#loc8)
    %24 = stablehlo.convert %23 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32> loc(#loc124)
    %25 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc125)
    %26 = stablehlo.divide %24, %25 : tensor<4096x4096xf32> loc(#loc125)
    %27 = stablehlo.is_finite %26 : (tensor<4096x4096xf32>) -> tensor<4096x4096xi1> loc(#loc126)
    %28 = stablehlo.reduce(%27 init: %7) across dimensions = [0, 1] : (tensor<4096x4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc4, #loc5]), %arg46: tensor<i1> loc(fused[#loc4, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc122)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc122)
    %29 = stablehlo.and %22, %28 : tensor<i1> loc(#loc13)
    %30 = stablehlo.constant dense<1.000000e+00> : tensor<f16> loc(#loc14)
    %31 = stablehlo.constant dense<1.000000e+00> : tensor<4096xf16> loc(#loc8)
    %32 = stablehlo.divide %arg41, %31 : tensor<4096xf16> loc(#loc8)
    %33 = stablehlo.convert %32 : (tensor<4096xf16>) -> tensor<4096xf32> loc(#loc124)
    %34 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc125)
    %35 = stablehlo.divide %33, %34 : tensor<4096xf32> loc(#loc125)
    %36 = stablehlo.is_finite %35 : (tensor<4096xf32>) -> tensor<4096xi1> loc(#loc126)
    %37 = stablehlo.reduce(%36 init: %7) across dimensions = [0] : (tensor<4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc6, #loc5]), %arg46: tensor<i1> loc(fused[#loc6, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc123)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc123)
    %38 = stablehlo.and %29, %37 : tensor<i1> loc(#loc13)
    %39 = stablehlo.constant dense<1.000000e+00> : tensor<f16> loc(#loc15)
    %40 = stablehlo.constant dense<1.000000e+00> : tensor<4096x11008xf16> loc(#loc8)
    %41 = stablehlo.divide %arg42, %40 : tensor<4096x11008xf16> loc(#loc8)
    %42 = stablehlo.convert %41 : (tensor<4096x11008xf16>) -> tensor<4096x11008xf32> loc(#loc124)
    %43 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096x11008xf32> loc(#loc125)
    %44 = stablehlo.divide %42, %43 : tensor<4096x11008xf32> loc(#loc125)
    %45 = stablehlo.is_finite %44 : (tensor<4096x11008xf32>) -> tensor<4096x11008xi1> loc(#loc126)
    %46 = stablehlo.reduce(%45 init: %7) across dimensions = [0, 1] : (tensor<4096x11008xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc4, #loc5]), %arg46: tensor<i1> loc(fused[#loc4, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc122)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc122)
    %47 = stablehlo.and %38, %46 : tensor<i1> loc(#loc13)
    %48 = stablehlo.divide %arg43, %31 : tensor<4096xf16> loc(#loc8)
    %49 = stablehlo.convert %48 : (tensor<4096xf16>) -> tensor<4096xf32> loc(#loc124)
    %50 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc125)
    %51 = stablehlo.divide %49, %50 : tensor<4096xf32> loc(#loc125)
    %52 = stablehlo.is_finite %51 : (tensor<4096xf32>) -> tensor<4096xi1> loc(#loc126)
    %53 = stablehlo.reduce(%52 init: %7) across dimensions = [0] : (tensor<4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc6, #loc5]), %arg46: tensor<i1> loc(fused[#loc6, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc123)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc123)
    %54 = stablehlo.and %47, %53 : tensor<i1> loc(#loc13)
    %55 = stablehlo.constant dense<1.000000e+00> : tensor<f16> loc(#loc16)
    %56 = stablehlo.constant dense<1.000000e+00> : tensor<32000x4096xf16> loc(#loc8)
    %57 = stablehlo.divide %arg44, %56 : tensor<32000x4096xf16> loc(#loc8)
    %58 = stablehlo.convert %57 : (tensor<32000x4096xf16>) -> tensor<32000x4096xf32> loc(#loc124)
    %59 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<f32>) -> tensor<32000x4096xf32> loc(#loc125)
    %60 = stablehlo.divide %58, %59 : tensor<32000x4096xf32> loc(#loc125)
    %61 = stablehlo.is_finite %60 : (tensor<32000x4096xf32>) -> tensor<32000x4096xi1> loc(#loc126)
    %62 = stablehlo.reduce(%61 init: %7) across dimensions = [0, 1] : (tensor<32000x4096xi1>, tensor<i1>) -> tensor<i1>
     reducer(%arg45: tensor<i1> loc(fused[#loc4, #loc5]), %arg46: tensor<i1> loc(fused[#loc4, #loc5]))  {
      %485 = stablehlo.and %arg45, %arg46 : tensor<i1> loc(#loc122)
      stablehlo.return %485 : tensor<i1> loc(#loc)
    } loc(#loc122)
    %63 = stablehlo.and %54, %62 : tensor<i1> loc(#loc13)
    %64 = stablehlo.custom_call @__builtin$CrossMeshAllReduce(%63) {backend_config = "AND;0$1$", has_side_effect = true, mhlo.sharding = "{replicated}"} : (tensor<i1>) -> tensor<i1> loc(#loc17)
    %65 = stablehlo.constant dense<2000> : tensor<i32> loc(#loc18)
    %66 = stablehlo.compare  EQ, %arg1, %65 : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc127)
    %67 = stablehlo.and %66, %64 : tensor<i1> loc(#loc128)
    %68 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc22)
    %69 = stablehlo.multiply %arg0, %68 : tensor<f32> loc(#loc129)
    %70 = stablehlo.select %67, %69, %arg0 : tensor<i1>, tensor<f32> loc(#loc130)
    %71 = stablehlo.constant dense<5.000000e-01> : tensor<f32> loc(#loc26)
    %72 = stablehlo.multiply %arg0, %71 : tensor<f32> loc(#loc131)
    %73 = stablehlo.select %64, %70, %72 : tensor<i1>, tensor<f32> loc(#loc132)
    %74 = stablehlo.not %64 : tensor<i1> loc(#loc133)
    %75 = stablehlo.or %66, %74 : tensor<i1> loc(#loc134)
    %76 = stablehlo.constant dense<0> : tensor<i32> loc(#loc32)
    %77 = stablehlo.constant dense<1> : tensor<i32> loc(#loc33)
    %78 = stablehlo.add %arg1, %77 : tensor<i32> loc(#loc135)
    %79 = stablehlo.select %75, %76, %78 : tensor<i1>, tensor<i32> loc(#loc136)
    %80 = stablehlo.add %arg2, %77 : tensor<i32> loc(#loc137)
    %81 = stablehlo.constant dense<2147483647> : tensor<i32> loc(#loc36)
    %82 = stablehlo.compare  LT, %arg3, %81 : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc138)
    %83 = stablehlo.add %arg3, %77 : tensor<i32> loc(#loc139)
    %84 = stablehlo.select %82, %83, %81 : tensor<i1>, tensor<i32> loc(#loc140)
    %85 = stablehlo.select %64, %84, %arg3 : tensor<i1>, tensor<i32> loc(#loc141)
    %86 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %87 = stablehlo.multiply %5, %5 : tensor<4096x4096xf32> loc(#loc143)
    %88 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc42)
    %89 = stablehlo.reduce(%87 init: %88) across dimensions = [0, 1] : (tensor<4096x4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc1, #loc2]), %arg46: tensor<f32> loc(fused[#loc1, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc120)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc120)
    %90 = stablehlo.multiply %12, %12 : tensor<4096x4096xf32> loc(#loc143)
    %91 = stablehlo.reduce(%90 init: %88) across dimensions = [0, 1] : (tensor<4096x4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc1, #loc2]), %arg46: tensor<f32> loc(fused[#loc1, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc120)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc120)
    %92 = stablehlo.add %89, %91 : tensor<f32> loc(#loc34)
    %93 = stablehlo.multiply %19, %19 : tensor<4096x4096xf32> loc(#loc143)
    %94 = stablehlo.reduce(%93 init: %88) across dimensions = [0, 1] : (tensor<4096x4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc1, #loc2]), %arg46: tensor<f32> loc(fused[#loc1, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc120)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc120)
    %95 = stablehlo.add %92, %94 : tensor<f32> loc(#loc34)
    %96 = stablehlo.multiply %26, %26 : tensor<4096x4096xf32> loc(#loc143)
    %97 = stablehlo.reduce(%96 init: %88) across dimensions = [0, 1] : (tensor<4096x4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc1, #loc2]), %arg46: tensor<f32> loc(fused[#loc1, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc120)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc120)
    %98 = stablehlo.add %95, %97 : tensor<f32> loc(#loc34)
    %99 = stablehlo.multiply %35, %35 : tensor<4096xf32> loc(#loc143)
    %100 = stablehlo.reduce(%99 init: %88) across dimensions = [0] : (tensor<4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc3, #loc2]), %arg46: tensor<f32> loc(fused[#loc3, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc121)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc121)
    %101 = stablehlo.add %98, %100 : tensor<f32> loc(#loc34)
    %102 = stablehlo.multiply %44, %44 : tensor<4096x11008xf32> loc(#loc143)
    %103 = stablehlo.reduce(%102 init: %88) across dimensions = [0, 1] : (tensor<4096x11008xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc1, #loc2]), %arg46: tensor<f32> loc(fused[#loc1, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc120)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc120)
    %104 = stablehlo.add %101, %103 : tensor<f32> loc(#loc34)
    %105 = stablehlo.multiply %51, %51 : tensor<4096xf32> loc(#loc143)
    %106 = stablehlo.reduce(%105 init: %88) across dimensions = [0] : (tensor<4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc3, #loc2]), %arg46: tensor<f32> loc(fused[#loc3, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc121)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc121)
    %107 = stablehlo.add %104, %106 : tensor<f32> loc(#loc34)
    %108 = stablehlo.multiply %60, %60 : tensor<32000x4096xf32> loc(#loc143)
    %109 = stablehlo.reduce(%108 init: %88) across dimensions = [0, 1] : (tensor<32000x4096xf32>, tensor<f32>) -> tensor<f32>
     reducer(%arg45: tensor<f32> loc(fused[#loc1, #loc2]), %arg46: tensor<f32> loc(fused[#loc1, #loc2]))  {
      %485 = stablehlo.add %arg45, %arg46 : tensor<f32> loc(#loc120)
      stablehlo.return %485 : tensor<f32> loc(#loc)
    } loc(#loc120)
    %110 = stablehlo.add %107, %109 : tensor<f32> loc(#loc34)
    %111 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc43)
    %112 = stablehlo.divide %110, %111 : tensor<f32> loc(#loc8)
    %113 = stablehlo.custom_call @__builtin$CrossMeshAllReduce(%112) {backend_config = "SUM;0$1$", has_side_effect = true, mhlo.sharding = "{replicated}"} : (tensor<f32>) -> tensor<f32> loc(#loc17)
    %114 = stablehlo.sqrt %113 : tensor<f32> loc(#loc144)
    %115 = stablehlo.compare  LT, %114, %111 : (tensor<f32>, tensor<f32>) -> tensor<i1> loc(#loc145)
    %116 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc146)
    %117 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc147)
    %118 = stablehlo.divide %5, %117 : tensor<4096x4096xf32> loc(#loc147)
    %119 = stablehlo.select %116, %5, %118 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc146)
    %120 = stablehlo.constant dense<1.000000e-01> : tensor<f32> loc(#loc48)
    %121 = stablehlo.constant dense<1.000000e-01> : tensor<4096x4096xf32> loc(#loc148)
    %122 = stablehlo.multiply %119, %121 : tensor<4096x4096xf32> loc(#loc148)
    %123 = stablehlo.constant dense<0.899999976> : tensor<f32> loc(#loc50)
    %124 = stablehlo.constant dense<0.899999976> : tensor<4096x4096xf32> loc(#loc148)
    %125 = stablehlo.multiply %arg4, %124 : tensor<4096x4096xf32> loc(#loc148)
    %126 = stablehlo.add %122, %125 : tensor<4096x4096xf32> loc(#loc149)
    %127 = stablehlo.select %86, %126, %arg4 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %128 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %129 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc146)
    %130 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc147)
    %131 = stablehlo.divide %12, %130 : tensor<4096x4096xf32> loc(#loc147)
    %132 = stablehlo.select %129, %12, %131 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc146)
    %133 = stablehlo.multiply %132, %121 : tensor<4096x4096xf32> loc(#loc148)
    %134 = stablehlo.multiply %arg5, %124 : tensor<4096x4096xf32> loc(#loc148)
    %135 = stablehlo.add %133, %134 : tensor<4096x4096xf32> loc(#loc149)
    %136 = stablehlo.select %128, %135, %arg5 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %137 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %138 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc146)
    %139 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc147)
    %140 = stablehlo.divide %19, %139 : tensor<4096x4096xf32> loc(#loc147)
    %141 = stablehlo.select %138, %19, %140 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc146)
    %142 = stablehlo.multiply %141, %121 : tensor<4096x4096xf32> loc(#loc148)
    %143 = stablehlo.multiply %arg6, %124 : tensor<4096x4096xf32> loc(#loc148)
    %144 = stablehlo.add %142, %143 : tensor<4096x4096xf32> loc(#loc149)
    %145 = stablehlo.select %137, %144, %arg6 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %146 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %147 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc146)
    %148 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc147)
    %149 = stablehlo.divide %26, %148 : tensor<4096x4096xf32> loc(#loc147)
    %150 = stablehlo.select %147, %26, %149 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc146)
    %151 = stablehlo.multiply %150, %121 : tensor<4096x4096xf32> loc(#loc148)
    %152 = stablehlo.multiply %arg7, %124 : tensor<4096x4096xf32> loc(#loc148)
    %153 = stablehlo.add %151, %152 : tensor<4096x4096xf32> loc(#loc149)
    %154 = stablehlo.select %146, %153, %arg7 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %155 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc150)
    %156 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc146)
    %157 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc147)
    %158 = stablehlo.divide %35, %157 : tensor<4096xf32> loc(#loc147)
    %159 = stablehlo.select %156, %35, %158 : tensor<4096xi1>, tensor<4096xf32> loc(#loc146)
    %160 = stablehlo.constant dense<1.000000e-01> : tensor<f32> loc(#loc52)
    %161 = stablehlo.constant dense<1.000000e-01> : tensor<4096xf32> loc(#loc148)
    %162 = stablehlo.multiply %159, %161 : tensor<4096xf32> loc(#loc148)
    %163 = stablehlo.constant dense<0.899999976> : tensor<f32> loc(#loc53)
    %164 = stablehlo.constant dense<0.899999976> : tensor<4096xf32> loc(#loc148)
    %165 = stablehlo.multiply %arg8, %164 : tensor<4096xf32> loc(#loc148)
    %166 = stablehlo.add %162, %165 : tensor<4096xf32> loc(#loc149)
    %167 = stablehlo.select %155, %166, %arg8 : tensor<4096xi1>, tensor<4096xf32> loc(#loc141)
    %168 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x11008xi1> loc(#loc151)
    %169 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096x11008xi1> loc(#loc146)
    %170 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096x11008xf32> loc(#loc147)
    %171 = stablehlo.divide %44, %170 : tensor<4096x11008xf32> loc(#loc147)
    %172 = stablehlo.select %169, %44, %171 : tensor<4096x11008xi1>, tensor<4096x11008xf32> loc(#loc146)
    %173 = stablehlo.constant dense<1.000000e-01> : tensor<f32> loc(#loc55)
    %174 = stablehlo.constant dense<1.000000e-01> : tensor<4096x11008xf32> loc(#loc148)
    %175 = stablehlo.multiply %172, %174 : tensor<4096x11008xf32> loc(#loc148)
    %176 = stablehlo.constant dense<0.899999976> : tensor<f32> loc(#loc56)
    %177 = stablehlo.constant dense<0.899999976> : tensor<4096x11008xf32> loc(#loc148)
    %178 = stablehlo.multiply %arg9, %177 : tensor<4096x11008xf32> loc(#loc148)
    %179 = stablehlo.add %175, %178 : tensor<4096x11008xf32> loc(#loc149)
    %180 = stablehlo.select %168, %179, %arg9 : tensor<4096x11008xi1>, tensor<4096x11008xf32> loc(#loc141)
    %181 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc150)
    %182 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc146)
    %183 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc147)
    %184 = stablehlo.divide %51, %183 : tensor<4096xf32> loc(#loc147)
    %185 = stablehlo.select %182, %51, %184 : tensor<4096xi1>, tensor<4096xf32> loc(#loc146)
    %186 = stablehlo.multiply %185, %161 : tensor<4096xf32> loc(#loc148)
    %187 = stablehlo.multiply %arg10, %164 : tensor<4096xf32> loc(#loc148)
    %188 = stablehlo.add %186, %187 : tensor<4096xf32> loc(#loc149)
    %189 = stablehlo.select %181, %188, %arg10 : tensor<4096xi1>, tensor<4096xf32> loc(#loc141)
    %190 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<32000x4096xi1> loc(#loc152)
    %191 = stablehlo.broadcast_in_dim %115, dims = [] : (tensor<i1>) -> tensor<32000x4096xi1> loc(#loc146)
    %192 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<f32>) -> tensor<32000x4096xf32> loc(#loc147)
    %193 = stablehlo.divide %60, %192 : tensor<32000x4096xf32> loc(#loc147)
    %194 = stablehlo.select %191, %60, %193 : tensor<32000x4096xi1>, tensor<32000x4096xf32> loc(#loc146)
    %195 = stablehlo.constant dense<1.000000e-01> : tensor<f32> loc(#loc58)
    %196 = stablehlo.constant dense<1.000000e-01> : tensor<32000x4096xf32> loc(#loc148)
    %197 = stablehlo.multiply %194, %196 : tensor<32000x4096xf32> loc(#loc148)
    %198 = stablehlo.constant dense<0.899999976> : tensor<f32> loc(#loc59)
    %199 = stablehlo.constant dense<0.899999976> : tensor<32000x4096xf32> loc(#loc148)
    %200 = stablehlo.multiply %arg11, %199 : tensor<32000x4096xf32> loc(#loc148)
    %201 = stablehlo.add %197, %200 : tensor<32000x4096xf32> loc(#loc149)
    %202 = stablehlo.select %190, %201, %arg11 : tensor<32000x4096xi1>, tensor<32000x4096xf32> loc(#loc141)
    %203 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %204 = stablehlo.multiply %119, %119 : tensor<4096x4096xf32> loc(#loc153)
    %205 = stablehlo.constant dense<0.00999999977> : tensor<f32> loc(#loc61)
    %206 = stablehlo.constant dense<0.00999999977> : tensor<4096x4096xf32> loc(#loc154)
    %207 = stablehlo.multiply %204, %206 : tensor<4096x4096xf32> loc(#loc154)
    %208 = stablehlo.constant dense<9.900000e-01> : tensor<f32> loc(#loc63)
    %209 = stablehlo.constant dense<9.900000e-01> : tensor<4096x4096xf32> loc(#loc154)
    %210 = stablehlo.multiply %arg12, %209 : tensor<4096x4096xf32> loc(#loc154)
    %211 = stablehlo.add %207, %210 : tensor<4096x4096xf32> loc(#loc155)
    %212 = stablehlo.select %203, %211, %arg12 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %213 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %214 = stablehlo.multiply %132, %132 : tensor<4096x4096xf32> loc(#loc153)
    %215 = stablehlo.multiply %214, %206 : tensor<4096x4096xf32> loc(#loc154)
    %216 = stablehlo.multiply %arg13, %209 : tensor<4096x4096xf32> loc(#loc154)
    %217 = stablehlo.add %215, %216 : tensor<4096x4096xf32> loc(#loc155)
    %218 = stablehlo.select %213, %217, %arg13 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %219 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %220 = stablehlo.multiply %141, %141 : tensor<4096x4096xf32> loc(#loc153)
    %221 = stablehlo.multiply %220, %206 : tensor<4096x4096xf32> loc(#loc154)
    %222 = stablehlo.multiply %arg14, %209 : tensor<4096x4096xf32> loc(#loc154)
    %223 = stablehlo.add %221, %222 : tensor<4096x4096xf32> loc(#loc155)
    %224 = stablehlo.select %219, %223, %arg14 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %225 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc142)
    %226 = stablehlo.multiply %150, %150 : tensor<4096x4096xf32> loc(#loc153)
    %227 = stablehlo.multiply %226, %206 : tensor<4096x4096xf32> loc(#loc154)
    %228 = stablehlo.multiply %arg15, %209 : tensor<4096x4096xf32> loc(#loc154)
    %229 = stablehlo.add %227, %228 : tensor<4096x4096xf32> loc(#loc155)
    %230 = stablehlo.select %225, %229, %arg15 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc141)
    %231 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc150)
    %232 = stablehlo.multiply %159, %159 : tensor<4096xf32> loc(#loc153)
    %233 = stablehlo.constant dense<0.00999999977> : tensor<f32> loc(#loc64)
    %234 = stablehlo.constant dense<0.00999999977> : tensor<4096xf32> loc(#loc154)
    %235 = stablehlo.multiply %232, %234 : tensor<4096xf32> loc(#loc154)
    %236 = stablehlo.constant dense<9.900000e-01> : tensor<f32> loc(#loc65)
    %237 = stablehlo.constant dense<9.900000e-01> : tensor<4096xf32> loc(#loc154)
    %238 = stablehlo.multiply %arg16, %237 : tensor<4096xf32> loc(#loc154)
    %239 = stablehlo.add %235, %238 : tensor<4096xf32> loc(#loc155)
    %240 = stablehlo.select %231, %239, %arg16 : tensor<4096xi1>, tensor<4096xf32> loc(#loc141)
    %241 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x11008xi1> loc(#loc151)
    %242 = stablehlo.multiply %172, %172 : tensor<4096x11008xf32> loc(#loc153)
    %243 = stablehlo.constant dense<0.00999999977> : tensor<f32> loc(#loc66)
    %244 = stablehlo.constant dense<0.00999999977> : tensor<4096x11008xf32> loc(#loc154)
    %245 = stablehlo.multiply %242, %244 : tensor<4096x11008xf32> loc(#loc154)
    %246 = stablehlo.constant dense<9.900000e-01> : tensor<f32> loc(#loc67)
    %247 = stablehlo.constant dense<9.900000e-01> : tensor<4096x11008xf32> loc(#loc154)
    %248 = stablehlo.multiply %arg17, %247 : tensor<4096x11008xf32> loc(#loc154)
    %249 = stablehlo.add %245, %248 : tensor<4096x11008xf32> loc(#loc155)
    %250 = stablehlo.select %241, %249, %arg17 : tensor<4096x11008xi1>, tensor<4096x11008xf32> loc(#loc141)
    %251 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc150)
    %252 = stablehlo.multiply %185, %185 : tensor<4096xf32> loc(#loc153)
    %253 = stablehlo.multiply %252, %234 : tensor<4096xf32> loc(#loc154)
    %254 = stablehlo.multiply %arg18, %237 : tensor<4096xf32> loc(#loc154)
    %255 = stablehlo.add %253, %254 : tensor<4096xf32> loc(#loc155)
    %256 = stablehlo.select %251, %255, %arg18 : tensor<4096xi1>, tensor<4096xf32> loc(#loc141)
    %257 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<32000x4096xi1> loc(#loc152)
    %258 = stablehlo.multiply %194, %194 : tensor<32000x4096xf32> loc(#loc153)
    %259 = stablehlo.constant dense<0.00999999977> : tensor<f32> loc(#loc68)
    %260 = stablehlo.constant dense<0.00999999977> : tensor<32000x4096xf32> loc(#loc154)
    %261 = stablehlo.multiply %258, %260 : tensor<32000x4096xf32> loc(#loc154)
    %262 = stablehlo.constant dense<9.900000e-01> : tensor<f32> loc(#loc69)
    %263 = stablehlo.constant dense<9.900000e-01> : tensor<32000x4096xf32> loc(#loc154)
    %264 = stablehlo.multiply %arg19, %263 : tensor<32000x4096xf32> loc(#loc154)
    %265 = stablehlo.add %261, %264 : tensor<32000x4096xf32> loc(#loc155)
    %266 = stablehlo.select %257, %265, %arg19 : tensor<32000x4096xi1>, tensor<32000x4096xf32> loc(#loc141)
    %267 = stablehlo.compare  LT, %arg20, %81 : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc138)
    %268 = stablehlo.add %arg20, %77 : tensor<i32> loc(#loc139)
    %269 = stablehlo.select %267, %268, %81 : tensor<i1>, tensor<i32> loc(#loc140)
    %270 = stablehlo.select %64, %269, %arg20 : tensor<i1>, tensor<i32> loc(#loc141)
    %271 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc156)
    %272 = stablehlo.constant dense<70> : tensor<i32> loc(#loc71)
    %273 = stablehlo.compare  LT, %arg20, %272 : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc157)
    %274 = stablehlo.subtract %arg20, %76 : tensor<i32> loc(#loc158)
    %275 = stablehlo.maximum %274, %76 : tensor<i32> loc(#loc159)
    %276 = stablehlo.minimum %275, %272 : tensor<i32> loc(#loc160)
    %277 = stablehlo.convert %276 : (tensor<i32>) -> tensor<f32> loc(#loc161)
    %278 = stablehlo.constant dense<7.000000e+01> : tensor<f32> loc(#loc78)
    %279 = stablehlo.divide %277, %278 : tensor<f32> loc(#loc162)
    %280 = stablehlo.subtract %111, %279 : tensor<f32> loc(#loc163)
    %281 = stablehlo.constant dense<-9.99999974E-6> : tensor<f32> loc(#loc79)
    %282 = stablehlo.multiply %280, %281 : tensor<f32> loc(#loc164)
    %283 = stablehlo.constant dense<9.99999974E-6> : tensor<f32> loc(#loc81)
    %284 = stablehlo.add %282, %283 : tensor<f32> loc(#loc165)
    %285 = stablehlo.subtract %arg20, %272 : tensor<i32> loc(#loc166)
    %286 = stablehlo.constant dense<2265> : tensor<i32> loc(#loc82)
    %287 = stablehlo.minimum %285, %286 : tensor<i32> loc(#loc167)
    %288 = stablehlo.convert %287 : (tensor<i32>) -> tensor<f32> loc(#loc168)
    %289 = stablehlo.constant dense<3.14159274> : tensor<f32> loc(#loc86)
    %290 = stablehlo.multiply %288, %289 : tensor<f32> loc(#loc169)
    %291 = stablehlo.constant dense<2.265000e+03> : tensor<f32> loc(#loc87)
    %292 = stablehlo.divide %290, %291 : tensor<f32> loc(#loc170)
    %293 = stablehlo.cosine %292 : tensor<f32> loc(#loc171)
    %294 = stablehlo.add %293, %111 : tensor<f32> loc(#loc172)
    %295 = stablehlo.multiply %294, %71 : tensor<f32> loc(#loc169)
    %296 = stablehlo.power %295, %111 : tensor<f32> loc(#loc173)
    %297 = stablehlo.multiply %296, %283 : tensor<f32> loc(#loc174)
    %298 = stablehlo.select %273, %284, %297 : tensor<i1>, tensor<f32> loc(#loc175)
    %299 = stablehlo.constant dense<-1.000000e+00> : tensor<f32> loc(#loc92)
    %300 = stablehlo.multiply %298, %299 : tensor<f32> loc(#loc176)
    %301 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc177)
    %302 = stablehlo.constant dense<0.899999976> : tensor<f32> loc(#loc95)
    %303 = stablehlo.convert %84 : (tensor<i32>) -> tensor<f32> loc(#loc178)
    %304 = stablehlo.power %302, %303 : tensor<f32> loc(#loc179)
    %305 = stablehlo.subtract %111, %304 : tensor<f32> loc(#loc180)
    %306 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %307 = stablehlo.divide %126, %306 : tensor<4096x4096xf32> loc(#loc181)
    %308 = stablehlo.constant dense<9.900000e-01> : tensor<f32> loc(#loc98)
    %309 = stablehlo.convert %84 : (tensor<i32>) -> tensor<f32> loc(#loc178)
    %310 = stablehlo.power %308, %309 : tensor<f32> loc(#loc179)
    %311 = stablehlo.subtract %111, %310 : tensor<f32> loc(#loc180)
    %312 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %313 = stablehlo.divide %211, %312 : tensor<4096x4096xf32> loc(#loc181)
    %314 = stablehlo.sqrt %313 : tensor<4096x4096xf32> loc(#loc182)
    %315 = stablehlo.constant dense<9.99999993E-9> : tensor<f32> loc(#loc100)
    %316 = stablehlo.constant dense<9.99999993E-9> : tensor<4096x4096xf32> loc(#loc183)
    %317 = stablehlo.add %314, %316 : tensor<4096x4096xf32> loc(#loc183)
    %318 = stablehlo.divide %307, %317 : tensor<4096x4096xf32> loc(#loc184)
    %319 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc101)
    %320 = stablehlo.constant dense<0.000000e+00> : tensor<4096x4096xf32> loc(#loc185)
    %321 = stablehlo.multiply %arg29, %320 : tensor<4096x4096xf32> loc(#loc185)
    %322 = stablehlo.add %318, %321 : tensor<4096x4096xf32> loc(#loc186)
    %323 = stablehlo.multiply %301, %322 : tensor<4096x4096xf32> loc(#loc177)
    %324 = stablehlo.add %arg29, %323 : tensor<4096x4096xf32> loc(#loc187)
    %325 = stablehlo.convert %324 : (tensor<4096x4096xf32>) -> tensor<4096x4096xf16> loc(#loc188)
    %326 = stablehlo.constant dense<0.000000e+00> : tensor<f16> loc(#loc106)
    %327 = stablehlo.constant dense<0.000000e+00> : tensor<4096x4096xf16> loc(#loc189)
    %328 = stablehlo.multiply %arg21, %327 : tensor<4096x4096xf16> loc(#loc189)
    %329 = stablehlo.add %325, %328 : tensor<4096x4096xf16> loc(#loc190)
    %330 = stablehlo.select %271, %329, %arg21 : tensor<4096x4096xi1>, tensor<4096x4096xf16> loc(#loc191)
    %331 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc156)
    %332 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc177)
    %333 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %334 = stablehlo.divide %135, %333 : tensor<4096x4096xf32> loc(#loc181)
    %335 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %336 = stablehlo.divide %217, %335 : tensor<4096x4096xf32> loc(#loc181)
    %337 = stablehlo.sqrt %336 : tensor<4096x4096xf32> loc(#loc182)
    %338 = stablehlo.add %337, %316 : tensor<4096x4096xf32> loc(#loc183)
    %339 = stablehlo.divide %334, %338 : tensor<4096x4096xf32> loc(#loc184)
    %340 = stablehlo.multiply %arg30, %320 : tensor<4096x4096xf32> loc(#loc185)
    %341 = stablehlo.add %339, %340 : tensor<4096x4096xf32> loc(#loc186)
    %342 = stablehlo.multiply %332, %341 : tensor<4096x4096xf32> loc(#loc177)
    %343 = stablehlo.add %arg30, %342 : tensor<4096x4096xf32> loc(#loc187)
    %344 = stablehlo.convert %343 : (tensor<4096x4096xf32>) -> tensor<4096x4096xf16> loc(#loc188)
    %345 = stablehlo.multiply %arg22, %327 : tensor<4096x4096xf16> loc(#loc189)
    %346 = stablehlo.add %344, %345 : tensor<4096x4096xf16> loc(#loc190)
    %347 = stablehlo.select %331, %346, %arg22 : tensor<4096x4096xi1>, tensor<4096x4096xf16> loc(#loc191)
    %348 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc156)
    %349 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc177)
    %350 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %351 = stablehlo.divide %144, %350 : tensor<4096x4096xf32> loc(#loc181)
    %352 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %353 = stablehlo.divide %223, %352 : tensor<4096x4096xf32> loc(#loc181)
    %354 = stablehlo.sqrt %353 : tensor<4096x4096xf32> loc(#loc182)
    %355 = stablehlo.add %354, %316 : tensor<4096x4096xf32> loc(#loc183)
    %356 = stablehlo.divide %351, %355 : tensor<4096x4096xf32> loc(#loc184)
    %357 = stablehlo.multiply %arg31, %320 : tensor<4096x4096xf32> loc(#loc185)
    %358 = stablehlo.add %356, %357 : tensor<4096x4096xf32> loc(#loc186)
    %359 = stablehlo.multiply %349, %358 : tensor<4096x4096xf32> loc(#loc177)
    %360 = stablehlo.add %arg31, %359 : tensor<4096x4096xf32> loc(#loc187)
    %361 = stablehlo.convert %360 : (tensor<4096x4096xf32>) -> tensor<4096x4096xf16> loc(#loc188)
    %362 = stablehlo.multiply %arg23, %327 : tensor<4096x4096xf16> loc(#loc189)
    %363 = stablehlo.add %361, %362 : tensor<4096x4096xf16> loc(#loc190)
    %364 = stablehlo.select %348, %363, %arg23 : tensor<4096x4096xi1>, tensor<4096x4096xf16> loc(#loc191)
    %365 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc156)
    %366 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc177)
    %367 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %368 = stablehlo.divide %153, %367 : tensor<4096x4096xf32> loc(#loc181)
    %369 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096x4096xf32> loc(#loc181)
    %370 = stablehlo.divide %229, %369 : tensor<4096x4096xf32> loc(#loc181)
    %371 = stablehlo.sqrt %370 : tensor<4096x4096xf32> loc(#loc182)
    %372 = stablehlo.add %371, %316 : tensor<4096x4096xf32> loc(#loc183)
    %373 = stablehlo.divide %368, %372 : tensor<4096x4096xf32> loc(#loc184)
    %374 = stablehlo.multiply %arg32, %320 : tensor<4096x4096xf32> loc(#loc185)
    %375 = stablehlo.add %373, %374 : tensor<4096x4096xf32> loc(#loc186)
    %376 = stablehlo.multiply %366, %375 : tensor<4096x4096xf32> loc(#loc177)
    %377 = stablehlo.add %arg32, %376 : tensor<4096x4096xf32> loc(#loc187)
    %378 = stablehlo.convert %377 : (tensor<4096x4096xf32>) -> tensor<4096x4096xf16> loc(#loc188)
    %379 = stablehlo.multiply %arg24, %327 : tensor<4096x4096xf16> loc(#loc189)
    %380 = stablehlo.add %378, %379 : tensor<4096x4096xf16> loc(#loc190)
    %381 = stablehlo.select %365, %380, %arg24 : tensor<4096x4096xi1>, tensor<4096x4096xf16> loc(#loc191)
    %382 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc192)
    %383 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc177)
    %384 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc181)
    %385 = stablehlo.divide %166, %384 : tensor<4096xf32> loc(#loc181)
    %386 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc181)
    %387 = stablehlo.divide %239, %386 : tensor<4096xf32> loc(#loc181)
    %388 = stablehlo.sqrt %387 : tensor<4096xf32> loc(#loc182)
    %389 = stablehlo.constant dense<9.99999993E-9> : tensor<f32> loc(#loc108)
    %390 = stablehlo.constant dense<9.99999993E-9> : tensor<4096xf32> loc(#loc183)
    %391 = stablehlo.add %388, %390 : tensor<4096xf32> loc(#loc183)
    %392 = stablehlo.divide %385, %391 : tensor<4096xf32> loc(#loc184)
    %393 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc109)
    %394 = stablehlo.constant dense<0.000000e+00> : tensor<4096xf32> loc(#loc185)
    %395 = stablehlo.multiply %arg33, %394 : tensor<4096xf32> loc(#loc185)
    %396 = stablehlo.add %392, %395 : tensor<4096xf32> loc(#loc186)
    %397 = stablehlo.multiply %383, %396 : tensor<4096xf32> loc(#loc177)
    %398 = stablehlo.add %arg33, %397 : tensor<4096xf32> loc(#loc187)
    %399 = stablehlo.convert %398 : (tensor<4096xf32>) -> tensor<4096xf16> loc(#loc188)
    %400 = stablehlo.constant dense<0.000000e+00> : tensor<f16> loc(#loc110)
    %401 = stablehlo.constant dense<0.000000e+00> : tensor<4096xf16> loc(#loc189)
    %402 = stablehlo.multiply %arg25, %401 : tensor<4096xf16> loc(#loc189)
    %403 = stablehlo.add %399, %402 : tensor<4096xf16> loc(#loc190)
    %404 = stablehlo.select %382, %403, %arg25 : tensor<4096xi1>, tensor<4096xf16> loc(#loc191)
    %405 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x11008xi1> loc(#loc193)
    %406 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096x11008xf32> loc(#loc177)
    %407 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096x11008xf32> loc(#loc181)
    %408 = stablehlo.divide %179, %407 : tensor<4096x11008xf32> loc(#loc181)
    %409 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096x11008xf32> loc(#loc181)
    %410 = stablehlo.divide %249, %409 : tensor<4096x11008xf32> loc(#loc181)
    %411 = stablehlo.sqrt %410 : tensor<4096x11008xf32> loc(#loc182)
    %412 = stablehlo.constant dense<9.99999993E-9> : tensor<f32> loc(#loc111)
    %413 = stablehlo.constant dense<9.99999993E-9> : tensor<4096x11008xf32> loc(#loc183)
    %414 = stablehlo.add %411, %413 : tensor<4096x11008xf32> loc(#loc183)
    %415 = stablehlo.divide %408, %414 : tensor<4096x11008xf32> loc(#loc184)
    %416 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc112)
    %417 = stablehlo.constant dense<0.000000e+00> : tensor<4096x11008xf32> loc(#loc185)
    %418 = stablehlo.multiply %arg34, %417 : tensor<4096x11008xf32> loc(#loc185)
    %419 = stablehlo.add %415, %418 : tensor<4096x11008xf32> loc(#loc186)
    %420 = stablehlo.multiply %406, %419 : tensor<4096x11008xf32> loc(#loc177)
    %421 = stablehlo.add %arg34, %420 : tensor<4096x11008xf32> loc(#loc187)
    %422 = stablehlo.convert %421 : (tensor<4096x11008xf32>) -> tensor<4096x11008xf16> loc(#loc188)
    %423 = stablehlo.constant dense<0.000000e+00> : tensor<f16> loc(#loc113)
    %424 = stablehlo.constant dense<0.000000e+00> : tensor<4096x11008xf16> loc(#loc189)
    %425 = stablehlo.multiply %arg26, %424 : tensor<4096x11008xf16> loc(#loc189)
    %426 = stablehlo.add %422, %425 : tensor<4096x11008xf16> loc(#loc190)
    %427 = stablehlo.select %405, %426, %arg26 : tensor<4096x11008xi1>, tensor<4096x11008xf16> loc(#loc191)
    %428 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc192)
    %429 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc177)
    %430 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc181)
    %431 = stablehlo.divide %188, %430 : tensor<4096xf32> loc(#loc181)
    %432 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<4096xf32> loc(#loc181)
    %433 = stablehlo.divide %255, %432 : tensor<4096xf32> loc(#loc181)
    %434 = stablehlo.sqrt %433 : tensor<4096xf32> loc(#loc182)
    %435 = stablehlo.add %434, %390 : tensor<4096xf32> loc(#loc183)
    %436 = stablehlo.divide %431, %435 : tensor<4096xf32> loc(#loc184)
    %437 = stablehlo.multiply %arg35, %394 : tensor<4096xf32> loc(#loc185)
    %438 = stablehlo.add %436, %437 : tensor<4096xf32> loc(#loc186)
    %439 = stablehlo.multiply %429, %438 : tensor<4096xf32> loc(#loc177)
    %440 = stablehlo.add %arg35, %439 : tensor<4096xf32> loc(#loc187)
    %441 = stablehlo.convert %440 : (tensor<4096xf32>) -> tensor<4096xf16> loc(#loc188)
    %442 = stablehlo.multiply %arg27, %401 : tensor<4096xf16> loc(#loc189)
    %443 = stablehlo.add %441, %442 : tensor<4096xf16> loc(#loc190)
    %444 = stablehlo.select %428, %443, %arg27 : tensor<4096xi1>, tensor<4096xf16> loc(#loc191)
    %445 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<32000x4096xi1> loc(#loc194)
    %446 = stablehlo.broadcast_in_dim %300, dims = [] : (tensor<f32>) -> tensor<32000x4096xf32> loc(#loc177)
    %447 = stablehlo.broadcast_in_dim %305, dims = [] : (tensor<f32>) -> tensor<32000x4096xf32> loc(#loc181)
    %448 = stablehlo.divide %201, %447 : tensor<32000x4096xf32> loc(#loc181)
    %449 = stablehlo.broadcast_in_dim %311, dims = [] : (tensor<f32>) -> tensor<32000x4096xf32> loc(#loc181)
    %450 = stablehlo.divide %265, %449 : tensor<32000x4096xf32> loc(#loc181)
    %451 = stablehlo.sqrt %450 : tensor<32000x4096xf32> loc(#loc182)
    %452 = stablehlo.constant dense<9.99999993E-9> : tensor<f32> loc(#loc114)
    %453 = stablehlo.constant dense<9.99999993E-9> : tensor<32000x4096xf32> loc(#loc183)
    %454 = stablehlo.add %451, %453 : tensor<32000x4096xf32> loc(#loc183)
    %455 = stablehlo.divide %448, %454 : tensor<32000x4096xf32> loc(#loc184)
    %456 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc115)
    %457 = stablehlo.constant dense<0.000000e+00> : tensor<32000x4096xf32> loc(#loc195)
    %458 = stablehlo.multiply %arg36, %457 : tensor<32000x4096xf32> loc(#loc185)
    %459 = stablehlo.add %455, %458 : tensor<32000x4096xf32> loc(#loc186)
    %460 = stablehlo.multiply %446, %459 : tensor<32000x4096xf32> loc(#loc177)
    %461 = stablehlo.add %arg36, %460 : tensor<32000x4096xf32> loc(#loc187)
    %462 = stablehlo.convert %461 : (tensor<32000x4096xf32>) -> tensor<32000x4096xf16> loc(#loc188)
    %463 = stablehlo.constant dense<0.000000e+00> : tensor<f16> loc(#loc117)
    %464 = stablehlo.constant dense<0.000000e+00> : tensor<32000x4096xf16> loc(#loc189)
    %465 = stablehlo.multiply %arg28, %464 : tensor<32000x4096xf16> loc(#loc189)
    %466 = stablehlo.add %462, %465 : tensor<32000x4096xf16> loc(#loc190)
    %467 = stablehlo.select %445, %466, %arg28 : tensor<32000x4096xi1>, tensor<32000x4096xf16> loc(#loc191)
    %468 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc196)
    %469 = stablehlo.select %468, %324, %arg29 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc197)
    %470 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc196)
    %471 = stablehlo.select %470, %343, %arg30 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc197)
    %472 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc196)
    %473 = stablehlo.select %472, %360, %arg31 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc197)
    %474 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x4096xi1> loc(#loc196)
    %475 = stablehlo.select %474, %377, %arg32 : tensor<4096x4096xi1>, tensor<4096x4096xf32> loc(#loc197)
    %476 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc198)
    %477 = stablehlo.select %476, %398, %arg33 : tensor<4096xi1>, tensor<4096xf32> loc(#loc197)
    %478 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096x11008xi1> loc(#loc199)
    %479 = stablehlo.select %478, %421, %arg34 : tensor<4096x11008xi1>, tensor<4096x11008xf32> loc(#loc197)
    %480 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<4096xi1> loc(#loc198)
    %481 = stablehlo.select %480, %440, %arg35 : tensor<4096xi1>, tensor<4096xf32> loc(#loc197)
    %482 = stablehlo.broadcast_in_dim %64, dims = [] : (tensor<i1>) -> tensor<32000x4096xi1> loc(#loc200)
    %483 = stablehlo.select %482, %461, %arg36 : tensor<32000x4096xi1>, tensor<32000x4096xf32> loc(#loc197)
    %484 = stablehlo.tuple %73, %79, %80, %85, %127, %136, %145, %154, %167, %180, %189, %202, %212, %218, %224, %230, %240, %250, %256, %266, %270, %330, %347, %364, %381, %404, %427, %444, %467, %469, %471, %473, %475, %477, %479, %481, %483 {xla_shape = "(f32[], s32[], s32[], s32[], f32[4096,4096]{1,0}, /*index=5*/f32[4096,4096]{1,0}, f32[4096,4096]{1,0}, f32[4096,4096]{1,0}, f32[4096]{0}, f32[4096,11008]{1,0}, /*index=10*/f32[4096]{0}, f32[32000,4096]{1,0}, f32[4096,4096]{1,0}, f32[4096,4096]{1,0}, f32[4096,4096]{1,0}, /*index=15*/f32[4096,4096]{1,0}, f32[4096]{0}, f32[4096,11008]{1,0}, f32[4096]{0}, f32[32000,4096]{1,0}, /*index=20*/s32[], f16[4096,4096]{1,0}, f16[4096,4096]{1,0}, f16[4096,4096]{1,0}, f16[4096,4096]{1,0}, /*index=25*/f16[4096]{0}, f16[4096,11008]{1,0}, f16[4096]{0}, f16[32000,4096]{1,0}, f32[4096,4096]{1,0}, /*index=30*/f32[4096,4096]{1,0}, f32[4096,4096]{1,0}, f32[4096,4096]{1,0}, f32[4096]{0}, f32[4096,11008]{1,0}, /*index=35*/f32[4096]{0}, f32[32000,4096]{1,0})"} : !tuple loc(#loc119)
    return %484 : !tuple loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc7 = loc("constant.105")
#loc8 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/div")
#loc9 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/convert_element_type[new_dtype=float32 weak_type=False]")
#loc10 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":487:0)
#loc11 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/is_finite")
#loc12 = loc("constant.162")
#loc13 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/and")
#loc14 = loc("constant.101")
#loc15 = loc("constant.103")
#loc16 = loc("constant.99")
#loc17 = loc("custom-call.2")
#loc18 = loc("constant.158")
#loc19 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/eq")
#loc20 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":495:0)
#loc21 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":496:0)
#loc22 = loc("constant.161")
#loc23 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/mul")
#loc24 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":497:0)
#loc25 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/select_n")
#loc26 = loc("constant.157")
#loc27 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":498:0)
#loc28 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":499:0)
#loc29 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/not")
#loc30 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":500:0)
#loc31 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/or")
#loc32 = loc("constant.163")
#loc33 = loc("constant.128")
#loc34 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/add")
#loc35 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":335:0)
#loc36 = loc("constant.156")
#loc37 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/lt")
#loc38 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/numerics.py":118:0)
#loc39 = loc("/data/hejing/distri/alpa/Trainer/train_ray_batch.py":67:0)
#loc40 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/broadcast_in_dim[shape=(4096, 4096) broadcast_dimensions=()]")
#loc41 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/numerics.py":45:0)
#loc42 = loc("constant.160")
#loc43 = loc("constant.167")
#loc44 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/sqrt")
#loc45 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/linear_algebra.py":29:0)
#loc46 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/clipping.py":116:0)
#loc47 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/clipping.py":120:0)
#loc48 = loc("constant.97")
#loc49 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":84:0)
#loc50 = loc("constant.95")
#loc51 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/broadcast_in_dim[shape=(4096,) broadcast_dimensions=()]")
#loc52 = loc("constant.89")
#loc53 = loc("constant.87")
#loc54 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/broadcast_in_dim[shape=(4096, 11008) broadcast_dimensions=()]")
#loc55 = loc("constant.93")
#loc56 = loc("constant.91")
#loc57 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/broadcast_in_dim[shape=(32000, 4096) broadcast_dimensions=()]")
#loc58 = loc("constant.85")
#loc59 = loc("constant.83")
#loc60 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":98:0)
#loc61 = loc("constant.81")
#loc62 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":107:0)
#loc63 = loc("constant.79")
#loc64 = loc("constant.73")
#loc65 = loc("constant.71")
#loc66 = loc("constant.77")
#loc67 = loc("constant.75")
#loc68 = loc("constant.69")
#loc69 = loc("constant.67")
#loc70 = loc("/data/hejing/distri/alpa/Trainer/train_ray_batch.py":70:0)
#loc71 = loc("constant.155")
#loc72 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":399:0)
#loc73 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/sub")
#loc74 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":87:0)
#loc75 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/max")
#loc76 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/min")
#loc77 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":88:0)
#loc78 = loc("constant.154")
#loc79 = loc("constant.153")
#loc80 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":89:0)
#loc81 = loc("constant.152")
#loc82 = loc("constant.151")
#loc83 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":240:0)
#loc84 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/convert_element_type[new_dtype=float32 weak_type=True]")
#loc85 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":241:0)
#loc86 = loc("constant.150")
#loc87 = loc("constant.149")
#loc88 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/cos")
#loc89 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/pow")
#loc90 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":242:0)
#loc91 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/schedule.py":243:0)
#loc92 = loc("constant.148")
#loc93 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/alias.py":38:0)
#loc94 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":807:0)
#loc95 = loc("constant.165")
#loc96 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":118:0)
#loc97 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":122:0)
#loc98 = loc("constant.166")
#loc99 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":348:0)
#loc100 = loc("constant.65")
#loc101 = loc("constant.57")
#loc102 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/transform.py":770:0)
#loc103 = loc("/usr/local/lib/python3.9/dist-packages/optax/_src/update.py":43:0)
#loc104 = loc("parallelize(train_step_pipeshard_parallel_mesh_0)/jit(main)/convert_element_type[new_dtype=float16 weak_type=False]")
#loc105 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":323:0)
#loc106 = loc("constant.49")
#loc107 = loc("/data/hejing/distri/alpa/alpa/model/model_util.py":330:0)
#loc108 = loc("constant.61")
#loc109 = loc("constant.53")
#loc110 = loc("constant.45")
#loc111 = loc("constant.63")
#loc112 = loc("constant.55")
#loc113 = loc("constant.47")
#loc114 = loc("constant.59")
#loc115 = loc("constant.51")
#loc116 = loc("/usr/local/lib/python3.9/dist-packages/neurai/nn/layer/attention.py":128:0)
#loc117 = loc("constant.43")
#loc118 = loc("/data/hejing/distri/alpa/Trainer/train_ray_batch.py":73:0)
#loc119 = loc("tuple.38")
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc8, #loc10])
#loc126 = loc(fused[#loc11, #loc5])
#loc127 = loc(fused[#loc19, #loc20])
#loc128 = loc(fused[#loc13, #loc21])
#loc129 = loc(fused[#loc23, #loc24])
#loc130 = loc(fused[#loc25, #loc21])
#loc131 = loc(fused[#loc23, #loc27])
#loc132 = loc(fused[#loc25, #loc28])
#loc133 = loc(fused[#loc29, #loc30])
#loc134 = loc(fused[#loc31, #loc30])
#loc135 = loc(fused[#loc34, #loc30])
#loc136 = loc(fused[#loc25, #loc30])
#loc137 = loc(fused[#loc34, #loc35])
#loc138 = loc(fused[#loc37, #loc38])
#loc139 = loc(fused[#loc34, #loc38])
#loc140 = loc(fused[#loc25, #loc38])
#loc141 = loc(fused[#loc25, #loc39])
#loc142 = loc(fused[#loc40, #loc39])
#loc143 = loc(fused[#loc23, #loc41])
#loc144 = loc(fused[#loc44, #loc45])
#loc145 = loc(fused[#loc37, #loc46])
#loc146 = loc(fused[#loc25, #loc47])
#loc147 = loc(fused[#loc8, #loc47])
#loc148 = loc(fused[#loc23, #loc49])
#loc149 = loc(fused[#loc34, #loc49])
#loc150 = loc(fused[#loc51, #loc39])
#loc151 = loc(fused[#loc54, #loc39])
#loc152 = loc(fused[#loc57, #loc39])
#loc153 = loc(fused[#loc23, #loc60])
#loc154 = loc(fused[#loc23, #loc62])
#loc155 = loc(fused[#loc34, #loc62])
#loc156 = loc(fused[#loc40, #loc70])
#loc157 = loc(fused[#loc37, #loc72])
#loc158 = loc(fused[#loc73, #loc74])
#loc159 = loc(fused[#loc75, #loc74])
#loc160 = loc(fused[#loc76, #loc74])
#loc161 = loc(fused[#loc9, #loc77])
#loc162 = loc(fused[#loc8, #loc77])
#loc163 = loc(fused[#loc73, #loc77])
#loc164 = loc(fused[#loc23, #loc80])
#loc165 = loc(fused[#loc34, #loc80])
#loc166 = loc(fused[#loc73, #loc72])
#loc167 = loc(fused[#loc76, #loc83])
#loc168 = loc(fused[#loc84, #loc85])
#loc169 = loc(fused[#loc23, #loc85])
#loc170 = loc(fused[#loc8, #loc85])
#loc171 = loc(fused[#loc88, #loc85])
#loc172 = loc(fused[#loc34, #loc85])
#loc173 = loc(fused[#loc89, #loc90])
#loc174 = loc(fused[#loc23, #loc91])
#loc175 = loc(fused[#loc25, #loc72])
#loc176 = loc(fused[#loc23, #loc93])
#loc177 = loc(fused[#loc23, #loc94])
#loc178 = loc(fused[#loc9, #loc96])
#loc179 = loc(fused[#loc89, #loc96])
#loc180 = loc(fused[#loc73, #loc96])
#loc181 = loc(fused[#loc8, #loc97])
#loc182 = loc(fused[#loc44, #loc99])
#loc183 = loc(fused[#loc34, #loc99])
#loc184 = loc(fused[#loc8, #loc99])
#loc185 = loc(fused[#loc23, #loc102])
#loc186 = loc(fused[#loc34, #loc102])
#loc187 = loc(fused[#loc34, #loc103])
#loc188 = loc(fused[#loc104, #loc105])
#loc189 = loc(fused[#loc23, #loc107])
#loc190 = loc(fused[#loc34, #loc107])
#loc191 = loc(fused[#loc25, #loc70])
#loc192 = loc(fused[#loc51, #loc70])
#loc193 = loc(fused[#loc54, #loc70])
#loc194 = loc(fused[#loc57, #loc70])
#loc195 = loc(fused[#loc57, #loc116])
#loc196 = loc(fused[#loc40, #loc118])
#loc197 = loc(fused[#loc25, #loc118])
#loc198 = loc(fused[#loc51, #loc118])
#loc199 = loc(fused[#loc54, #loc118])
#loc200 = loc(fused[#loc57, #loc118])
